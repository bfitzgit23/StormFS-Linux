# Description: The Rust language with Cargo included.
# URL: https://www.rust-lang.org/
# Maintainer: CRUX System Team, core-ports at crux dot nu
# Depends on: cmake curl llvm
# Optional: libssh gdb git


name=rustc
version=1.88.0
release=1
source=(https://static.rust-lang.org/dist/$name-$version-src.tar.xz)
build() {
        cd $name-$version-src
        mkdir -pv $PKG/opt/$name-$version      &&
ln -svfn $name-$version $PKG/opt/$name

cat > bootstrap.toml << "EOF" &&
# See bootstrap.toml.example for more possible options,
# and see src/bootstrap/defaults/bootstrap.dist.toml for a few options
# automatically set when building from a release tarball.
# We have to override a decent number of them.

# Tell x.py the editors have reviewed the content of this file
# and updated it to follow the major changes of the building system,
# so x.py will not warn us to do such a review.
change-id = 140732

[llvm]
# When using system llvm prefer shared libraries
link-shared = true

EOF
if [ ! -f /usr/lib32/libc.so.6 ]; then
cat >> bootstrap.toml << "EOF"
# If building the shipped LLVM source, only enable the x86 target
# instead of all the targets supported by LLVM.
targets = "X86"

EOF
fi
cat >> bootstrap.toml << "EOF"
[build]
description = "for GLFS #e640"
EOF
if [ -f /usr/lib32/libc.so.6 ]; then
cat >> bootstrap.toml << "EOF"
target = [
  "x86_64-unknown-linux-gnu",
  "i686-unknown-linux-gnu",
]
EOF
fi &&
cat >> bootstrap.toml << "EOF" &&

# omit docs to save time and space (default is to build them)
docs = false

# Do not query new versions of dependencies online.
locked-deps = true

# Specify which extended tools (those from the default install).
tools = ["cargo", "clippy", "rustdoc", "rustfmt"]

[install]
prefix = "/opt/rustc-1.88.0"
docdir = "share/doc/rustc-1.88.0"

[rust]
channel = "stable"

# Uncomment if FileCheck has been installed.
#codegen-tests = false

# Disable the need for lld.
lld = false

# If you didn't build in NVPTX support, you can uncomment this.
#llvm-bitcode-linker = false

# Enable the same optimizations as the official upstream build.
lto = "thin"
codegen-units = 1

EOF
if [ -f /usr/lib32/libc.so.6 ]; then
cat >> bootstrap.toml << "EOF"
[target.x86_64-unknown-linux-gnu]
cc = "/usr/bin/gcc"
cxx = "/usr/bin/g++"
ar = "/usr/bin/gcc-ar"
ranlib = "/usr/bin/gcc-ranlib"
llvm-config = "/usr/bin/llvm-config"

[target.i686-unknown-linux-gnu]
cc = "/usr/bin/gcc"
cxx = "/usr/bin/g++"
ar = "/usr/bin/gcc-ar"
ranlib = "/usr/bin/gcc-ranlib"
EOF
else
cat >> bootstrap.toml << "EOF"
[target.x86_64-unknown-linux-gnu]
llvm-config = "/usr/bin/llvm-config"

[target.i686-unknown-linux-gnu]
llvm-config = "/usr/bin/llvm-config"
EOF
fi
#sed '/MirOpt/d' -i src/bootstrap/src/core/builder/mod.rs
#patch -Np1 -i ../$name-$version-llvm_20-1.patch
#[ ! -e /usr/include/libssh2.h ] || export LIBSSH2_SYS_USE_PKG_CONFIG=1
#[ ! -e /usr/include/sqlite3.h ] || export LIBSQLITE3_SYS_USE_PKG_CONFIG=1
python3 x.py build
DESTDIR=$PKG python3 x.py install
find $PKG/opt/$name-$version -name "*.old" -delete
install -vdm755 $PKG/usr/share/zsh/site-functions      &&
ln -sfv $PKG/opt/rustc/share/zsh/site-functions/_cargo \
        $PKG/usr/share/zsh/site-functions
}
